% Code to extract runup timeseries from timestack (with user input)
%
% Input:
%   imageName = full path and filename of runup timestack
%   savePath  = full path of directory to save runup timeseries
%
% Output:
%   (automatically saves runup timeseries to "savePath")
%   runup = Matlab structure, length of timestack (~2000)
%         params = parameters used by tool
%         CAM = camera name
%         epoch = date/time in epoch format
%         xyz = position of runup line in local coordinates (x=cross-shore, y=along-shore, z=0)
%         Ri = x-position of runup line in pixel coordinates
%         UV = NaNs
%
% Usage: runupTool(imageName,savePath)
%
% Written by: Jenna Brown, USGS, 2017
%               (based on Argus runupTool.m)
%--------------------------------------------------------------------------
function runupTool(imageName,savePath)

outPathName = [savePath filesep] ;

confirmed = 0;

% *** runup timestack
fname = parseFilename(imageName,'noLocal');
runup = load(imageName);    

if( isfield(runup,'runup') )
    try
        imageName = runup.runup.params.imageName;
        instName = runup.runup.params.instName;
        disp ('***REVIEW SESSION ENABLED***, Sucessful, Data Retrieved');
        confirmed = 1;
        stackData = load(imageName);
%         fname.type = 'runup90';
    catch
        disp('error opening runup mat file, invalid format or information missing')
        return
    end
else
    stackData = runup;
    clear runup;
    if( ~isfield(stackData,'RAW') )
        disp(['error loading data: ' imageName ' no RAW data!?']);
        return;
    end
    instName = fname.type;
end

inputStructure.imageName   = imageName;
inputStructure.instName    = instName;
inputStructure.outPathName = outPathName;

clear imageName;
clear instName;
clear outPathName;

P = parameters('P');

saveStructure.outPathName = inputStructure.outPathName;
saveStructure.imageName   = inputStructure.imageName;
saveStructure.instName    = inputStructure.instName;
saveStructure.savename = [fname.time '.' fname.when '.' fname.station '.cx.r' fname.type(2:end) '.runup.mat'];
% saveStructure.savename = [fname.time '.' fname.when '.' fname.station '.cx.r' fname.type(6:end) '.runup.mat'];

currentData.scrnum = 0; %start with the first screen.. silly

%***FIX: for runup stacks with pixels from multiple cameras, need to
%sort by x-coordinate (runup was appearing in wrong cross-shore location)
[~,ind]=sort(stackData.XYZ(:,1));

stackData.data = double(stackData.RAW(:,ind));

stackData.params=struct;
stackData.params.lines=length(stackData.T);                         %length of time stack/series
stackData.epoch=stackData.T;
stackData.xyz = stackData.XYZ(ind,:);
stackData.UV=nan(length(stackData.T),size(stackData.XYZ,1));        %fill with NaNs
stackData.CAM=repmat(fname.camera,size(stackData.xyz,1),1);

%--------------------------------------------------------------------------
% keyboard
toolFigure  = parameters('toolFigure');

version   = parameters('version');

set(gcf,'Color',[1 1 1]);

b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',version.position,...
    'BackgroundColor',version.bcolor,'string','0.0');

syncro = parameters('syncro');

b=uicontrol('Parent',gcf,...
    'style', 'text','units',...
    'normalized',...
    'position',syncro.position, ...
    'Tag','syncroTag',...
    'userData',gcf,...
    'FontSize',syncro.fontsize,...
    'fontweight',syncro.fontweight,...
    'BackgroundColor',syncro.bcolor,...
    'ForegroundColor',syncro.fcolor,...
    'string',int2str(get(gcf,'Number')));

forward = parameters('forward');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',forward.bcolor, ...
    'ForegroundColor',forward.fcolor, ...
	'Callback','showScreen(1)', ...
	'Position',forward.position, ...
	'String','Down', ...
	'Tag','forwardButtonTag',...
    'FontSize',forward.fontsize,...
    'fontweight',forward.fontweight);

reverse = parameters('reverse');

 b = uicontrol('Parent',gcf, ...
 	'Units','normalized', ...
 	'BackgroundColor',reverse.bcolor, ...
    'ForegroundColor',reverse.fcolor, ...
 	'Callback','showScreen(-1)', ...
 	'Position',reverse.position, ...
 	'String','Up', ...
 	'Tag','backButtonTag',...
    'FontSize',reverse.fontsize,...
    'fontweight',reverse.fontweight);

edit = parameters('edit');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',edit.bcolor, ...
    'ForegroundColor',edit.fcolor,...
	'Callback','linearEditPoints', ...
	'Position',edit.position, ...
	'String','Edit', ...
	'Tag','editButtonTag',...
    'FontSize',edit.fontsize,...
    'fontweight',edit.fontweight);

save = parameters('save');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',save.bcolor, ...
	'Callback','saveRunup', ...
	'Position',save.position, ...
	'String','Save', ...
	'Tag','saveButtonTag',...
    'FontSize',save.fontsize,...
    'fontweight',save.fontweight);

quit = parameters('quit');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',quit.bcolor, ...
	'Callback','quitRunup', ...
	'Position',quit.position, ...
	'String','Quit', ...
	'Tag','quitButtonTag',...
    'FontSize',quit.fontsize,...
    'fontweight',quit.fontweight);

%%this exists only as storage containers.. 
b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',save.bcolor, ...
	'Callback','edgeDetect; makeLine;', ...
	'Position',[.85 0.85 0.007 0.002], ...
	'String','e', ...
	'Tag','edgeButtonTag');

%%this also exists only as a storage container.. 
 b = uicontrol('Parent',gcf, ...
 	'Units','normalized', ...
 	'BackgroundColor',save.bcolor, ...
 	'Callback','backgroundIntensity', ...
 	'Position',[.85 .4 0.007 0.002], ...
 	'String','Calculate BG', ...
 	'Tag','backgroundIntensityTag');

setIThreshUp = parameters('setIThreshUp');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',setIThreshUp.bcolor, ...
	'Callback','setIThreshUp', ...
	'Position',setIThreshUp.position, ...
	'String','Save', ...
	'style', 'slider', ...
	'min',setIThreshUp.min, 'max',setIThreshUp.max, ...
	'value', P.IThreshUp, ...
	'Tag','IThreshUp');

setIThreshDown = parameters('setIThreshDown');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',setIThreshDown.bcolor, ...
	'Callback','setIThreshDown', ...
	'Position',setIThreshDown.position, ...
	'String','Save', ...
	'style', 'slider', ...
	'min', setIThreshDown.min, 'max',setIThreshDown.max, ...
	'value',P.IThreshDown, ...
	'Tag','IThreshDown');

setmaxRundown = parameters('setmaxRundown');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',setmaxRundown.bcolor, ...
	'Callback','setmaxRundown', ...
	'Position',setmaxRundown.position, ...
	'String','Save', ...
	'style', 'slider', ...
	'min',setmaxRundown.min, 'max',setmaxRundown.max, ...
	'value', P.maxRundown, ...
	'Tag','maxRundown');

setNFiltLight = parameters('setNFiltLight');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',setNFiltLight.bcolor, ...
	'Callback','setNFiltLight', ...
	'Position',setNFiltLight.position, ...
	'String','Save', ...
	'style', 'slider', ...
	'min',setNFiltLight.min, 'max',setNFiltLight.max, ...
	'value', P.NFiltLight, ...
	'Tag','NFiltLight');

setNFiltDark = parameters('setNFiltDark');

b = uicontrol('Parent',gcf, ...
	'Units','normalized', ...
	'BackgroundColor',setNFiltDark.bcolor, ...
	'Callback','setNFiltDark', ...
	'Position',setNFiltDark.position, ...
	'String','Save', ...
	'style', 'slider', ...
	'min', setNFiltDark.min, 'max', setNFiltDark.max, ...
	'value', P.NFiltDark, ...
	'Tag','NFiltDark');

valIThreshUp = parameters('valIThreshUp');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',valIThreshUp.position, ...
    'BackgroundColor',valIThreshUp.bcolor,'string',P.IThreshUp);

valIThreshDown = parameters('valIThreshDown');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',valIThreshDown.position, ...
    'BackgroundColor',valIThreshDown.bcolor,'string',P.IThreshDown);

valmaxRundown = parameters('valmaxRundown');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',valmaxRundown.position, ...
    'BackgroundColor',valmaxRundown.bcolor,'string',P.maxRundown);

valNFiltLight = parameters('valNFiltLight');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',valNFiltLight.position, ...
    'BackgroundColor',valNFiltLight.bcolor,'string',P.NFiltLight);

valNFiltDark = parameters('valNFiltDark');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',valNFiltDark.position, ...
    'BackgroundColor',valNFiltDark.bcolor,'string',P.NFiltDark);

tagIThreshUp = parameters('tagIThreshUp');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',tagIThreshUp.position, ...
    'BackgroundColor',tagIThreshUp.bcolor,'string',tagIThreshUp.name);

tagIThreshDown = parameters('tagIThreshDown');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',tagIThreshDown.position, ...
    'BackgroundColor',tagIThreshDown.bcolor,'string',tagIThreshDown.name );

tagmaxRundown = parameters('tagmaxRundown');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',tagmaxRundown.position, ...
    'BackgroundColor',tagmaxRundown.bcolor,'string',tagmaxRundown.name );

tagNFiltLight = parameters('tagNFiltLight');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',tagNFiltLight.position, ...
    'BackgroundColor',tagNFiltLight.bcolor,'string',tagNFiltLight.name );

tagNFiltDark = parameters('tagNFiltDark');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',tagNFiltDark.position, ...
    'BackgroundColor',tagNFiltDark.bcolor,'string',tagNFiltDark.name);

currentDisplay = parameters('currentDisplay');
b=uicontrol('Parent',gcf, 'style', 'text','units',...
    'normalized','position',currentDisplay.position, ...
    'BackgroundColor',currentDisplay.bcolor,...
    'string',currentDisplay.string);

displayImage = parameters('displayImage');
b=uicontrol('Style', 'listbox','units','normalized', 'String',...
    displayImage.string,'position',displayImage.position,...
    'BackgroundColor',displayImage.bcolor,...
    'tag', 'listbox','Callback','displayImage');

cacheHandles
handle = get (gcf,'userData'); % retreive from the cache

set (handle.maxRundown,             'UserData',                     P);
set (handle.saveButtonTag,          'UserData',         saveStructure);
set (handle.forwardButtonTag,       'UserData',           currentData);
set (handle.backButtonTag,          'UserData',             stackData);

if confirmed == 1
set (handle.edgeButtonTag,          'UserData',runup.runup.Ri);
end

%bring up the first screen;
showScreen(1);

%saveRunup
%--------------------------------------------------------------------------
%
% Copyright by Oregon State University, 2002
% Developed through collaborative effort of the Argus Users Group
% For official use by the Argus Users Group or other licensed activities.
%
% $Id: runupTool.m,v 1.4 2011/04/15 22:04:54 stanley Exp stanley $
%
% $Log: runupTool.m,v $
% Revision 1.4  2011/04/15 22:04:54  stanley
% check for no instruments
%
% Revision 1.3  2007/07/06 23:23:53  stanley
% changed test for interpolated pixed from "7" to bitand
%
% Revision 1.2  2004/09/03 17:39:42  stanley
% cast data coming from loadStack
%
% Revision 1.1  2004/08/20 20:17:20  stanley
% Initial revision
%
%
%key runup 
%comment Estimates runup location for a given stack 
%
